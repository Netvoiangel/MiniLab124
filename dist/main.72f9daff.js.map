{"version":3,"sources":["js/utils.js","js/main.js"],"names":["formValues","formValidation","validatePassword","exports","password","hasUppercase","test","hasNumber","hasSpecialChar","isValid","length","validateEmail","email","String","toLowerCase","match","getValidationStatus","Object","values","every","validationStatus","setFormValue","valueKey","newValue","validator","undefined","submitSignUpForm","console","log","_utils","require","passwordField","document","getElementById","password_id","oninput","e","target","value","classList","remove","add","first_name_id","last_name_id","email_id","sign_in_link_id","sign_up_form_id","sign_up_btn_id","sign_in_form_id","first_name","switch_to_sign_in","onclick","style","display","sign_up_btn","preventDefault"],"mappings":";AA8DC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,QAAA,cAAA,QAAA,iBAAA,QAAA,aAAA,QAAA,yBAAA,EA9DD,IAAMA,EAAa,GACbC,EAAiB,GAMVC,EAAgBC,QAAAD,iBAAG,SAACE,GAC/B,IACMC,EAAe,QAAQC,KAAKF,GAC5BG,EAAY,KAAKD,KAAKF,GACtBI,EAAiB,yBAAyBF,KAAKF,GAE/CK,EAAUL,EAASM,QALP,GAK8BL,GAAgBE,GAAaC,EAK7E,OAFAP,EAAeG,SAAWK,EAEnBA,GAKIE,EAAaR,QAAAQ,cAAG,SAACC,GAK5B,OAAOC,OAAOD,GACXE,cACAC,MAJY,0JASJC,EAAmBb,QAAAa,oBAAG,WAIjC,OAAOC,OAAOC,OAAOjB,GAAgBkB,MAAM,SAACC,GAAgB,QAAOA,KAKxDC,EAAYlB,QAAAkB,aAAG,SAACC,EAAUC,EAAUC,GAC/CxB,EAAWsB,GAAYC,OACLE,IAAdD,IACFvB,EAAeqB,GAAYE,EAAUD,KAO5BG,EAAgBvB,QAAAuB,iBAAG,WAC9B,OAAKV,KAILW,QAAQC,IAAI,gBACZD,QAAQC,IAAI5B,IACL,IALL2B,QAAQC,IAAI,sBACL;;AC2BV,aApFD,IAAAC,EAAAC,QAAA,cAOMC,EAAgBC,SAASC,eAAeC,GAC9CH,EAAcI,QAAU,SAACC,IACP,EAAAlC,EAAgB,kBAACkC,EAAEC,OAAOC,QAExCP,EAAcQ,UAAUC,OAAO,WAC/BT,EAAcQ,UAAUE,IAAI,WAE5BV,EAAcQ,UAAUC,OAAO,SAC/BT,EAAcQ,UAAUE,IAAI,aAIhCrC,SAASmC,UAAUE,IAAI,SACvBrC,SAASmC,UAAUC,OAAO,SAI1Bb,QAAQC,IAAI,YACZD,QAAQC,IAAII,UAmBZ,IAAMU,EAAgB,aAChBC,EAAe,YACfT,EAAc,WACdU,EAAW,QAEXC,EAAkB,eAClBC,EAAkB,eAElBC,EAAiB,cACjBC,EAAkB,eAQlBC,EAAajB,SAASC,eAAeS,GAC3CO,EAAWd,QAAU,SAACC,GAAC,OAAK,EAAAf,EAAY,cAACqB,EAAeN,EAAEC,OAAOC,QAEjE,IAAM1B,EAAQoB,SAASC,eAAeW,GACtChC,EAAMuB,QAAU,SAACC,GAAC,OAAK,EAAAf,EAAY,cAACuB,EAAUR,EAAEC,OAAOC,MAAO3B,EAAa,gBAM3E,IAAMuC,EAAoBlB,SAASC,eAAeY,GAClDK,EAAkBC,QAAU,SAACf,GAC3BJ,SAASC,eAAea,GAAiBM,MAAMC,QAAU,OACzDrB,SAASC,eAAee,GAAiBI,MAAMC,QAAU,IAI3D,IAAMC,EAActB,SAASC,eAAec,GAC5CO,EAAYH,QAAU,SAACf,GAGrBA,EAAEmB,kBACF,EAAA7B,EAAgB","file":"main.72f9daff.js","sourceRoot":"..","sourcesContent":["const formValues = {}  // Сюда пишутся значения формы (Object как в Java, или dict из Python)\r\nconst formValidation = {}  // Сюда пишутся статусы валидации каждого поля. Если поле ни разу не валидировалось,\r\n// то при обращении к Object вернётся undefined, который при логическом сравнении обрабатывается как false\r\n\r\n\r\n// Объявляется и инициализируется константная переменная\r\n// Инициализация функцией, заданной в стрелочном виде\r\nexport const validatePassword = (password) => {\r\n  const minLength = 8;\r\n  const hasUppercase = /[A-Z]/.test(password);\r\n  const hasNumber = /\\d/.test(password);\r\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n  const isValid = password.length >= minLength && hasUppercase && hasNumber && hasSpecialChar;\r\n\r\n  // В formValidation сохраняем статус валидации\r\n  formValidation.password = isValid;\r\n\r\n  return isValid;\r\n};\r\n\r\n\r\n\r\nexport const validateEmail = (email) => {\r\n  // Создадим шаблон регулярного выражения. В нём применяются шаблонные строки\r\n  // Гуглить по тегам: \"шаблонные строки js\", \"регулярные выражения\"\r\n  const regExp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n\r\n  return String(email)\r\n    .toLowerCase()\r\n    .match(regExp);\r\n}\r\n\r\n\r\n// Функция возвращающая true если все валидации пройдены, и false если хотя бы одна не пройдена\r\nexport const getValidationStatus = () => {\r\n  // Происходит функциональная мгаия, читай строчку кода ниже как:\r\n  // Получить значения (не ключи) из объекта, затем применить к каждому значению функцию двойного логического отрицания\r\n  // (преобразование к булевому типу) и результаты всех применений это true, то вернуть true, иначе - false\r\n  return Object.values(formValidation).every((validationStatus) => !!validationStatus)\r\n}\r\n\r\n\r\n// Функция возвращающая которая ставит значение поля в форме по ключу\r\nexport const setFormValue = (valueKey, newValue, validator) => {\r\n  formValues[valueKey] = newValue\r\n  if (validator !== undefined) {\r\n    formValidation[valueKey] = validator(newValue)\r\n  }\r\n}\r\n\r\n\r\n// Функция для обработки отправки формы регистрации\r\n// В этой функции должен быть http запрос на сервер для регистрации пользователя (сейчас просто демонстрация)\r\nexport const submitSignUpForm = () => {\r\n  if (!getValidationStatus()) {\r\n    console.log(\"FORM IS INCORRECT\")\r\n    return false\r\n  }\r\n  console.log(\"FORM IS FINE\")\r\n  console.log(formValues)\r\n  return true\r\n}\r\n","import {setFormValue, submitSignUpForm, validateEmail, validatePassword} from \"./utils.js\"\r\n\r\n\r\n////// ДЕМОНСТРАЦИОННЫЙ УЧАСТОК КОДА. На оценку не влияет, исключительно для саморазвития.\r\n\r\n// Предлагаю \"поиграться\" с частями кода ниже, чтобы познакомиться с JS\r\n// Получаем элемент и меняем его класс, который определеён в библиотеке стилей materialize\r\nconst passwordField = document.getElementById(password_id);\r\npasswordField.oninput = (e) => {\r\n  const isValid = validatePassword(e.target.value);\r\n  if (isValid) {\r\n    passwordField.classList.remove(\"invalid\");\r\n    passwordField.classList.add(\"valid\");\r\n  } else {\r\n    passwordField.classList.remove(\"valid\");\r\n    passwordField.classList.add(\"invalid\");\r\n  }\r\n};\r\n\r\npassword.classList.add(\"valid\")\r\npassword.classList.remove(\"valid\")\r\n\r\n// В браузере можно посмотреть, что из себя представляет документ\r\n// (CTRL+SHIFT+i для открытия консоли и открыть вкладку \"консоль\", туда будет залогированно значение)\r\nconsole.log(\"Document\")\r\nconsole.log(document)\r\n\r\n// Если запросить id, которого нет в DOM дереве - вернется undefined\r\n// => надо быть осторожней: коллега может поменять id вашего элемента и упадёт !ВАШ! код\r\n// const first_name = document.getElementById('first_name_invalid');\r\n// first_name.oninput = (e) => validatePassword(e)\r\n\r\n// Селекция по классу. Может пригодится, для того, чтобы упростить обработку полей в двух формах.\r\n// Чтобы не делать кучу уникальных айди, можно определённым полям формы давать один класс и обрабатывать их в цикле\r\n// const passwords = document.querySelectorAll('.password')\r\n// console.log(passwords)\r\n// for (const password of passwords) {\r\n//   password.style.background = \"red\"\r\n// }\r\n\r\n////// КОНЕЦ ДЕМОНСТРАЦИОННОГО УЧАСТКА КОДА. Дальше код для оцениваемой части задания\r\n\r\n\r\n// Выписываем все айдишники HTMl-элементов в константы для переиспользования\r\nconst first_name_id = 'first_name'\r\nconst last_name_id = 'last_name'\r\nconst password_id = 'password'\r\nconst email_id = 'email'\r\n\r\nconst sign_in_link_id = 'sign_in_link'\r\nconst sign_up_form_id = 'sign_up_form'\r\n// const sign_in_form_id = 'sign_in_form'  // Пригодится\r\nconst sign_up_btn_id = 'sign_up_btn'\r\nconst sign_in_form_id = 'sign_in_form'\r\n\r\n\r\n// Получаем элемент DOM-дерева по id и присваиваем значение аттрибуту oninput\r\n// oninput вызывается с параметром \"event\" каждый раз, когда ввод меняется\r\n// Значение, которое мы присваеваем этому аттрибуту - это функция, определённая в стрелочном стиле\r\n// Гуглить по тегам \"события JS\", \"onchange/oninput HTML\", \"стрелочные функции JS\", ...\r\n\r\nconst first_name = document.getElementById(first_name_id);\r\nfirst_name.oninput = (e) => setFormValue(first_name_id, e.target.value)  // Установить значение без валидации\r\n\r\nconst email = document.getElementById(email_id);\r\nemail.oninput = (e) => setFormValue(email_id, e.target.value, validateEmail) // Установить значение с валидацией\r\n\r\n\r\n\r\n// Меняем стили объекта DOM дерева. Это позволяет скрыть форму регистрации и показать форму авторизации\r\n// Объект формы не исключается из DOM дерева, а просто становистя невидимым\r\nconst switch_to_sign_in = document.getElementById(sign_in_link_id);\r\nswitch_to_sign_in.onclick = (e) => {\r\n  document.getElementById(sign_up_form_id).style.display = \"none\"\r\n  document.getElementById(sign_in_form_id).style.display = \"\"\r\n}\r\n\r\n\r\nconst sign_up_btn = document.getElementById(sign_up_btn_id);\r\nsign_up_btn.onclick = (e) => {\r\n  // При нажатии кнопки в форме по умолчанию происходит перезагрузка страницы.\r\n  // Чтобы отключить его, нужно отменить стандартное поведение события\r\n  e.preventDefault()\r\n  submitSignUpForm()\r\n}\r\n\r\n"]}